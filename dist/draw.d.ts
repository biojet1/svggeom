import { Vector } from './vector.js';
import { BoundingBox } from './bbox.js';
declare class CanvasCompat {
    set fillStyle(_x: any);
    get fillStyle(): any;
    fill(): this;
    beginPath(): this;
}
export declare class PathDraw extends CanvasCompat {
    _x0?: number;
    _y0?: number;
    _x1?: number;
    _y1?: number;
    _: string;
    static get digits(): number;
    static set digits(n: number);
    move_to(...args: Vector[] | number[] | Iterable<number>[]): this;
    moveTo(x: number, y: number): this;
    lineTo(...args: Vector[] | number[]): this;
    closePath(): this;
    quadraticCurveTo(...args: Vector[] | number[]): this;
    bezierCurveTo(...args: Vector[] | number[]): this;
    arcTo(...args: Vector[] | number[]): this;
    arcd(...args: Vector[] | number[]): this;
    arc(...args: Vector[] | number[]): this;
    rect(...args: Vector[] | number[]): this;
    toString(): string;
    d(): string;
    text(options: {
        fontSize: number;
        font: Font;
        kerning?: boolean;
        tracking?: number;
        letterSpacing?: number;
    }, text: string): this;
    static new(): PathDraw;
    static move_to(): PathDraw;
    static lineTo(): PathDraw;
}
import { Font } from 'opentype.js';
import { SegmentLS } from './path/linked.js';
import { DescParams } from './path/index.js';
export declare class PathLS extends CanvasCompat {
    _tail: SegmentLS | undefined;
    constructor(tail: SegmentLS | undefined);
    move_to(...args: Vector[] | number[] | Iterable<number>[]): this;
    moveTo(x: number, y: number): this;
    lineTo(...args: Vector[] | number[]): this;
    bezierCurveTo(...args: Vector[] | number[]): this;
    quadraticCurveTo(...args: Vector[] | number[]): this;
    arc(...args: Vector[] | number[]): this;
    arcd(...args: Vector[] | number[]): this;
    arcTo(...args: Vector[] | number[]): this;
    rect(...args: Vector[] | number[]): this;
    closePath(): this;
    describe(opt?: DescParams): string;
    text(options: {
        fontSize: number;
        font: Font;
        kerning?: boolean;
        tracking?: number;
        letterSpacing?: number;
    }, text: string): this;
    segment_at_length(T: number, clamp?: boolean): [SegmentLS | undefined, number, number];
    segment_at(T: number): [SegmentLS | undefined, number];
    get length(): number;
    get from(): Vector | undefined;
    get to(): Vector | undefined;
    tangent_at(T: number): Vector | undefined;
    slope_at(T: number): Vector | undefined;
    point_at(T: number): Vector | undefined;
    point_at_length(L: number, clamp?: boolean): Vector | undefined;
    bbox(): BoundingBox;
    split_at(T: number): PathLS[];
    cut_at(T: number): PathLS;
    crop_at(T0: number, T1?: number): PathLS;
    reversed(_next?: SegmentLS): PathLS;
    terms(opt?: DescParams): (number | string)[];
    enumSubPaths(opt?: DescParams): Generator<SegmentLS | undefined, void, unknown>;
    [Symbol.iterator](): Generator<SegmentLS, void, unknown>;
    transform(M: any): PathLS;
    get firstSegment(): SegmentLS | undefined;
    get lastSegment(): SegmentLS | undefined;
    toString(): string;
    d(): string;
    static move_to(...args: Vector[] | number[]): PathLS;
    static parse(d: string): PathLS;
    static rect(...args: Vector[] | number[]): PathLS;
    static get digits(): number;
    static set digits(n: number);
    static lineTo(): PathLS;
}
export {};
