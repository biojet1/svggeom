import { Vector } from './vector.js';
type NumOrVec = number | Iterable<number>;
export declare class VecRay {
    readonly _pos: Vector;
    readonly _dir: Vector;
    constructor(pos: Vector, aim: Vector);
    get x(): number;
    get y(): number;
    get z(): number;
    get h(): number;
    get v(): number;
    get pos(): Vector;
    get dir(): Vector;
    [Symbol.iterator](): Iterator<number>;
    at(): Vector;
    distance(x: NumOrVec, y?: number): number;
    point_along(d: number): Vector;
    delta(x: NumOrVec, y?: number): Vector;
    side(x: NumOrVec, y?: number): 0 | 1 | -1;
    distance_from_line(a: Iterable<number>, b: Iterable<number>): number;
    nearest_point_of_line(a: Iterable<number>, b: Iterable<number>): Vector;
    intersect_of_line(a: Iterable<number>, b: Iterable<number>): Vector;
    intersect_of_ray(r: Ray): Vector;
    nearest_point_from_point(p: Iterable<number>): Vector;
}
export declare class Ray extends VecRay {
    clone(): Ray;
    protected new_pos(v: Vector): Ray;
    protected new_dir(v: Vector): Ray;
    protected new_ray(p: Vector, a: Vector): Ray;
    with_dir(rad: NumOrVec): Ray;
    with_h(h?: number): Ray;
    with_v(v?: number): Ray;
    with_x(x?: number): Ray;
    with_y(y?: number): Ray;
    with_z(z?: number): Ray;
    shift_x(d: number): Ray;
    shift_y(d: number): Ray;
    shift_z(d: number): Ray;
    flip_x(): Ray;
    flip_y(): Ray;
    flip_z(): Ray;
    goto(x: NumOrVec, y?: number): Ray;
    forward(d: number): Ray;
    back(d?: number): Ray;
    translate(x: NumOrVec, y?: number): Ray;
    along(t: number, x: NumOrVec, y?: number): Ray;
    turn(rad: NumOrVec): Ray;
    left(rad?: number): Ray;
    right(rad?: number): Ray;
    turnd(deg: number): Ray;
    leftd(deg: number): Ray;
    rightd(deg: number): Ray;
    towards(x: NumOrVec, y?: number): Ray;
    away(x: NumOrVec, y?: number): Ray;
    after(x: NumOrVec, y?: number): Ray;
    before(x: NumOrVec, y?: number): Ray;
    normal_to_side(a: Iterable<number>): Ray;
    normal_to_line(a: Iterable<number>, b: Iterable<number>): Ray;
    to_nearest_point_of_line(a: Iterable<number>, b: Iterable<number>): Ray;
    to_nearest_point_from_point(p: Iterable<number>): Ray;
    to_point_t(t: number, a: Iterable<number>, b: Iterable<number>): Ray;
    to_mid_point(a: Iterable<number>, b: Iterable<number>): Ray;
    static new(...args: NumOrVec[]): Ray;
    static pos(x: NumOrVec, y?: number): Ray;
    static at(x: NumOrVec, y?: number): Ray;
    static dir(rad: NumOrVec): Ray;
    static towards(x: NumOrVec, y?: number): Ray;
    static away(x: NumOrVec, y?: number): Ray;
    static after(x: NumOrVec, y?: number): Ray;
    static before(x: NumOrVec, y?: number): Ray;
    static get home(): Ray;
}
export declare class RayL extends Ray {
    _prev: Ray | undefined;
    constructor(pos: Vector, dir: Vector, ray?: Ray);
    prev(): Ray | undefined;
    protected new_pos(v: Vector): RayL;
    protected new_dir(v: Vector): RayL;
    protected new_ray(p: Vector, a: Vector): RayL;
}
export {};
