import { BoundingBox } from "../bbox.js";
import { BaseLC } from "./command.js";
import { DescParams } from "./index.js";
export declare class PathLC {
    static Unit: typeof BaseLC;
    _tail: BaseLC | undefined;
    constructor(tail: BaseLC | undefined);
    get length(): number;
    get first(): BaseLC | undefined;
    get last(): BaseLC | undefined;
    get from(): import("../vector.js").Vector | undefined;
    get to(): import("../vector.js").Vector | undefined;
    move_to(p: Iterable<number>): this;
    line_to(p: Iterable<number>): this;
    curve_to(c1: Iterable<number>, c2: Iterable<number>, p2: Iterable<number>): this;
    quad_to(c: Iterable<number>, p: Iterable<number>): this;
    arc_centered_at(c: Iterable<number>, radius: number, startAngle: number, endAngle: number, counterclockwise?: boolean): this;
    arc_tangent_to(p1: Iterable<number>, p2: Iterable<number>, r: number): this;
    rect(x: number, y: number, w: number, h: number): this;
    close(): this;
    [Symbol.iterator](): Generator<BaseLC, void, unknown>;
    shapes(opt?: DescParams): Generator<BaseLC | undefined, void, unknown>;
    set fillStyle(_x: any);
    get fillStyle(): any;
    fill(): this;
    beginPath(): this;
    lineTo(x: number, y: number): this;
    moveTo(x: number, y: number): this;
    closePath(): this;
    quadraticCurveTo(cx: number, cy: number, px: number, py: number): this;
    bezierCurveTo(cx1: number, cy1: number, cx2: number, cy2: number, px2: number, py2: number): this;
    arc(x: number, y: number, radius: number, startAngle: number, endAngle: number, counterclockwise?: boolean): this;
    arcTo(x1: number, y1: number, x2: number, y2: number, radius: number): this;
    arcd(x: number, y: number, radius: number, startAngle: number, endAngle: number, counterclockwise?: boolean): this;
    text(options: {
        fontSize: number;
        font: any;
        kerning?: boolean;
        tracking?: number;
        letterSpacing?: number;
    }, text: string): this;
    describe(opt?: DescParams): string;
    toString(): string;
    segment_at_length(T: number, clamp?: boolean): [BaseLC | undefined, number, number];
    segment_at(T: number): [BaseLC | undefined, number];
    tangent_at(T: number): import("../vector.js").Vector | undefined;
    slope_at(T: number): import("../vector.js").Vector | undefined;
    point_at(T: number): import("../vector.js").Vector | undefined;
    point_at_length(L: number, clamp?: boolean): import("../vector.js").Vector | undefined;
    bbox(): BoundingBox;
    split_at(T: number): PathLC[];
    cut_at(T: number): PathLC;
    crop_at(T0: number, T1?: number): PathLC;
    reversed(_next?: BaseLC): PathLC;
    terms(opt?: DescParams): (number | string)[];
    transform(M: any): PathLC;
    static lineTo(x: number, y: number): PathLC;
    static move_to(p: Iterable<number>): PathLC;
    static parse(d: string): PathLC;
    static rect(x: number, y: number, w: number, h: number): PathLC;
    static get digits(): number;
    static set digits(n: number);
}
