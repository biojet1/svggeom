import { Vector } from './vector.js';
export declare class BoundingBox {
    protected _x: number;
    protected _y: number;
    protected _h: number;
    protected _w: number;
    private static _not;
    protected constructor(x: number, y: number, width: number, height: number);
    clone(): BoundingBox;
    get x(): number;
    get left(): number;
    get minX(): number;
    get y(): number;
    get top(): number;
    get minY(): number;
    get width(): number;
    get height(): number;
    get maxX(): number;
    get maxY(): number;
    get right(): number;
    get bottom(): number;
    get centerX(): number;
    get centerY(): number;
    get center(): Vector;
    withCenter(p: Iterable<number>): BoundingBox;
    withSize(p: Iterable<number>): BoundingBox;
    withPos(p: Iterable<number>): BoundingBox;
    withMinY(n: number): BoundingBox;
    withMinX(n: number): BoundingBox;
    merge(box: BoundingBox): BoundingBox;
    inflated(h: number, v?: number): BoundingBox;
    transform(m: any): BoundingBox;
    isValid(): boolean;
    isEmpty(): boolean;
    toArray(): number[];
    toString(): string;
    equals(other: BoundingBox, epsilon?: number): boolean;
    overlap(other: BoundingBox): BoundingBox;
    static not(): BoundingBox;
    private static _empty?;
    static empty(): BoundingBox;
    static extrema(x1: number, x2: number, y1: number, y2: number): BoundingBox;
    static fromRect({ x, y, width, height }: {
        x?: number | undefined;
        y?: number | undefined;
        width?: number | undefined;
        height?: number | undefined;
    }): BoundingBox;
    static rect(x: number, y: number, width: number, height: number): BoundingBox;
    static parse(s: string): BoundingBox;
    static merge(...args: Array<BoundingBox>): BoundingBox;
    static new(first?: number | number[] | [number[], number[]] | string | BoundingBox, y?: number, width?: number, height?: number): BoundingBox;
}
export declare class BoxMut extends BoundingBox {
    get x(): number;
    set x(value: number);
    get y(): number;
    set y(value: number);
    get width(): number;
    set width(value: number);
    get height(): number;
    set height(value: number);
    private reset;
    mergeSelf(box: BoundingBox): this;
    inflateSelf(h: number, v?: number): BoundingBox;
    sizeSelf(w: number, h?: number): BoundingBox;
    isValid(): boolean;
    copy(that: BoundingBox): this;
    static not(): BoxMut;
    static rect(x: number, y: number, width: number, height: number): BoxMut;
}
