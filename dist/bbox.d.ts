import { Vector } from './vector.js';
export declare class BoundingInterval extends Vector {
    constructor(p: Iterable<number>);
    get center(): number;
    get size(): number;
    get minimum(): number;
    get maximum(): number;
    merge(that: BoundingInterval): BoundingInterval;
    merge_self(that: BoundingInterval): this;
    neg(): BoundingInterval;
    is_valid(): boolean;
    static check(p: Iterable<number>): BoundingInterval;
}
export declare class BoundingBox extends Array<BoundingInterval> {
    constructor(x?: Iterable<number>, y?: Iterable<number>);
    get _x(): BoundingInterval;
    get _y(): BoundingInterval;
    get y(): number;
    get x(): number;
    get width(): number;
    get height(): number;
    get top(): number;
    get min_y(): number;
    get left(): number;
    get min_x(): number;
    get bottom(): number;
    get max_y(): number;
    get right(): number;
    get max_x(): number;
    get center_x(): number;
    get center_y(): number;
    get diagonal_length(): number;
    get center(): Vector;
    get size(): Vector;
    toString(): string;
    dump(): number[][];
    dump_rect(): number[];
    merge(...args: BoundingBox[]): BoundingBox;
    with_center(p: Iterable<number>): BoundingBox;
    with_size(p: Iterable<number>): BoundingBox;
    with_pos(p: Iterable<number>): BoundingBox;
    with_min_y(n: number): BoundingBox;
    with_min_x(n: number): BoundingBox;
    inflated(h: number, v?: number): BoundingBox;
    neg(): BoundingBox;
    resize(delta_x: number, delta_y?: number | undefined): BoundingBox;
    merge_self(that: BoundingBox): this;
    equals(that: BoundingBox, epsilon?: number): boolean;
    is_valid(): boolean;
    clone(): BoundingBox;
    transform(m: any): BoundingBox;
    overlap(other: BoundingBox): BoundingBox;
    static not(): BoundingBox;
    static rect(x: number, y: number, width: number, height: number): BoundingBox;
    static extrema(x1: number, x2: number, y1: number, y2: number): BoundingBox;
    static check(x: Iterable<number>, y: Iterable<number>): BoundingBox;
    static empty(): BoundingBox;
    static new(first?: number | number[] | [number[], number[]] | string | BoundingBox, y?: number, width?: number, height?: number): BoundingBox;
    static parse(s: string): BoundingBox;
    static merge(...args: BoundingBox[]): BoundingBox;
}
